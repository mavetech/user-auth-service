1. Install Istio
   Check namespace istio-system
   Deploy services
   Check services
   Add label to namespace for instio

2. Check services
   Redeploy services
   Port-forward to user-auth-service
   Curl request to user-auth-service(traffic to both versions of the data service)
3. Traffic Management - Routing Policy
   VirtualService define routing rules
   Destination Rules - Configure what happens to the traffic to that destination
   01_routing_policy-v1 - sends traffic only to v1 (kubectl apply -f istio/traffic_management/01_routing_policy-v1.yaml)
   503 - apply destinatio-rule (kubectl apply -f istio/traffic_management/02_destination_rule.yaml)
   All Traffic now goes to the v1 service
4. Delete the 01_routing_policy-v1.yaml
   Apply 03_routing_policy_header.yml to direct traffic with header to v2, and other to v1
5. Delete 03_routing_policy_header.yml
   Apply 04_routing_canary_deployment for canary deployment (kubectl apply -f istio/traffic_management/04_routing_canary_deployment.yaml)
   30% traffic goes to v1 and 70% to v2

06. Ingress-Gateway pod exists
    Ingress-Gateway Service missing
    Apply 05-gateway.yaml to create gateway object, virtual service and Loadbalancer (kubectl apply -f istio/traffic_management/05_gateway.yaml)
    Check pod and svc -n istio-system
    Run minikube tunnel
07. Delete 05_gateway.yaml (kubectl delete -f istio/traffic_management/05_gateway.yaml )
    Apply 06_gateway (kubectl apply -f istio/traffic_management/06_gateway_multi_host_svc.yaml)
    Check 06_gateway_multi.yaml
    check /etc/hosts
    Request: curl -X POST -H "Content-Type: application/json" -d '{"username": "user1", "password": "your_password"}' http://user-auth.example.com/login
